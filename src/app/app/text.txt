'use client';
// This file is a part of the React application that displays a circular layout of numbers with labels
import React from 'react';
import {
  Box,
  Typography,
  Stack,
  useTheme,
  useMediaQuery,
  Grid,
  Paper,
  Container,
} from '@mui/material';
import { styled } from '@mui/material';
import { useRouter } from 'next/navigation';

// Type definitions
type Position = 'top' | 'top-right' | 'right' | 'bottom' | 'left';

interface AmountLabel {
  amount: string;
  position: Position;
}

interface Offset {
  x: number;
  y: number;
  transform?: string;
}

interface AmountLabels {
  [key: number]: AmountLabel;
}

const AppContainer = styled(Box)({
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  minHeight: '110vh',
  position: 'relative',
  overflow: 'auto',
  marginBottom: '4rem',
});

const NumberText = styled(Typography)({
  position: 'absolute',
  fontWeight: 'bold',
  fontSize: '15px',
  display: 'inline-block',
  whiteSpace: 'nowrap',
  left: '50%',
  top: '50%',
  transformOrigin: '0 0',
});

const AmountText = styled(Typography)({
  fontWeight: 500,
  fontSize: '14px',
  whiteSpace: 'nowrap',
});

const YearsText = styled(Typography)({
  fontWeight: 700,
  fontSize: '14px',
  whiteSpace: 'nowrap',
});

const ConnectorLine = styled(Box)({
  width: '22px',
  height: '2px',
  backgroundColor: '#333',
  position: 'absolute',
  mx: 2,
});

const VerticalLine = styled(Box)({
  width: '2px',
  height: '22px',
  backgroundColor: '#333',
  position: 'absolute',
  my: 2,
});

function App() {
  // Generate data for years 1-60 with corresponding dollar amounts
  const data = Array.from({ length: 60 }, (_, i) => ({
    year: i + 1,
    amount: (i + 1) * 100,
  }));

  const router = useRouter();

  const handleToNextPage = (num: number) => {
    router.push(`/payment/${num}`);
  };

  // SVG dimensions and vertical oval parameters
  const svgWidth = 800;
  const svgHeight = 1000;
  const centerX = svgWidth / 2;
  const centerY = svgHeight / 2;
  const ovalRadiusX = 150; // Narrower for vertical orientation
  const ovalRadiusY = 280; // Taller for vertical orientation
  const yearRadius = ovalRadiusX + 40;
  const amountRadius = ovalRadiusX + 100;

  // Generate positions for each data point around the vertical oval
  const positions = data.map((item, index) => {
    const angle = (index / data.length) * 2 * Math.PI - Math.PI / 2; // Start from top

    // Oval boundary point
    const ovalX = centerX + ovalRadiusX * Math.cos(angle);
    const ovalY = centerY + ovalRadiusY * Math.sin(angle);

    // Year position (closer to oval)
    const yearX = centerX + yearRadius * Math.cos(angle);
    const yearY = centerY + ((yearRadius * ovalRadiusY) / ovalRadiusX) * Math.sin(angle);

    // Amount position (further out)
    const amountX = centerX + amountRadius * Math.cos(angle);
    const amountY = centerY + ((amountRadius * ovalRadiusY) / ovalRadiusX) * Math.sin(angle);

    // Calculate rotation angle for text (in degrees)
    let rotationAngle = (angle * 180) / Math.PI;

    // Prevent upside-down text for angles between 90 and 270 degrees
    let textAnchor = 'start';
    if (rotationAngle > 90 && rotationAngle < 270) {
      rotationAngle += 180;
      textAnchor = 'end';
    }

    return {
      ...item,
      ovalX,
      ovalY,
      yearX,
      yearY,
      amountX,
      amountY,
      angle,
      rotationAngle,
      textAnchor,
    };
  });

  return (
    <Box
      sx={{
        minHeight: '100vh',

        py: 4,
      }}
    >
      <Container maxWidth="lg">
        <Box textAlign="center" mb={4}>
          <Typography variant="h3" component="h1" gutterBottom>
            Investment Growth Timeline
          </Typography>
          <Typography variant="h6" component="p" sx={{ maxWidth: 600, mx: 'auto' }}>
            A comprehensive vertical view of annual contributions from $100 in year 1 to $6,000 in
            year 60
          </Typography>
        </Box>

        <Box display="flex" justifyContent="center" mb={4}>
          <Paper
            elevation={0}
            sx={{
              borderRadius: 3,
              p: 3,
              overflow: 'auto',
            }}
          >
            <svg width={svgWidth} height={svgHeight} style={{ maxWidth: '100%', height: 'auto' }}>
              {/* Gradient and shadow definitions */}
              <defs>
                <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
                  <feDropShadow
                    dx="0"
                    dy="6"
                    stdDeviation="12"
                    floodColor="#000"
                    floodOpacity="0.15"
                  />
                </filter>
              </defs>

              {/* Main vertical oval - clean with no fill */}
              <ellipse
                cx={centerX}
                cy={centerY}
                rx={ovalRadiusX}
                ry={ovalRadiusY}
                fill="none"
                stroke="#1976d2"
                strokeWidth="3"
                filter="url(#shadow)"
              />

              {/* Data points */}
              {positions.map((point, index) => (
                <g key={index} onClick={() => handleToNextPage(point.year)}>
                  {/* Connection line from oval to amount */}
                  <line
                    x1={point.ovalX}
                    y1={point.ovalY}
                    x2={point.amountX}
                    y2={point.amountY}
                    stroke="#757575"
                    strokeWidth="1.5"
                    opacity="0.7"
                  />

                  {/* Small dot on oval perimeter */}
                  <circle
                    cx={point.ovalX}
                    cy={point.ovalY}
                    r="3"
                    fill="#1976d2"
                    stroke="white"
                    strokeWidth="2"
                  />

                  {/* Year text with background for visibility */}
                  <g>
                    {/* Background rectangle for year text */}
                    <rect
                      x={point.yearX - 25}
                      y={point.yearY - 8}
                      width="50"
                      height="16"
                      fill="white"
                      fillOpacity="0.95"
                      rx="2"
                      stroke="#e0e0e0"
                      strokeWidth="0.5"
                      transform={`rotate(${point.rotationAngle}, ${point.yearX}, ${point.yearY})`}
                    />
                    {/* Year number and "year/years" text in one line */}
                    <text
                      x={point.yearX}
                      y={point.yearY}
                      textAnchor="middle"
                      dominantBaseline="middle"
                      fill="#1a1a1a"
                      fontSize="11"
                      fontWeight="600"
                      transform={`rotate(${point.rotationAngle}, ${point.yearX}, ${point.yearY})`}
                    >
                      {point.year} {point.year === 1 ? 'year' : 'years'}
                    </text>
                  </g>

                  {/* Dollar amount with background for visibility */}
                  <g>
                    {/* Background rectangle for dollar amount */}
                    <rect
                      x={point.amountX - 30}
                      y={point.amountY - 8}
                      width="60"
                      height="16"
                      fill="white"
                      fillOpacity="0.95"
                      rx="2"
                      stroke="#e0e0e0"
                      strokeWidth="0.5"
                      transform={`rotate(${point.rotationAngle}, ${point.amountX}, ${point.amountY})`}
                    />
                    {/* Dollar amount text */}
                    <text
                      x={point.amountX}
                      y={point.amountY}
                      textAnchor="middle"
                      dominantBaseline="middle"
                      fill="#2e7d32"
                      fontSize="11"
                      fontWeight="700"
                      transform={`rotate(${point.rotationAngle}, ${point.amountX}, ${point.amountY})`}
                    >
                      ${point.amount.toLocaleString()}
                    </text>
                  </g>
                </g>
              ))}
            </svg>
          </Paper>
        </Box>
      </Container>
    </Box>
  );
}

export default App;
